# https://espanso.org/docs/
# ------------------------------------------

matches:
  - replace: 'osascript -e "tell application \"Drafts\" to make new draft with properties {content: \"$foo\", tags: {\"bar\"}}"'
    label: 🐚 Create Draft
  - replace: |
      file_name=$(basename "$input_path")
      ext="${file_name##*.}"
      file_without_extension="${file_name%.*}"
      file_name=$(basename "$input_path" .txt) # when extension is know, e.g. .txt
      parent_folder=$(dirname "$input_path")
    label: 🐚 Extract file name, extension or folder from path
  - replace: cd "$(dirname "$0")"
    label: 🐚 Go to directory of script (location)
  - replace: qlmanage -p "$filepath"
    label: 🐚 Quick Look file
  - replace: |
      plutil -extract name.childkey xml1 -o - example.plist | sed -n 4p | cut -d">" -f2 | cut -d"<" -f1
    label: 🐚 Read plist value
  - replace: echo | {command} 2>&1
    label: 🐚 Redirect STDERR to STDOUT
  - replace: |
      if [[ "$LONG_STRING" =~ "$SHORTSTRING" ]] ; then
      	echo "short string is part of long string"
      fi
    label: 🐚 String Includes
  - triggers: ["!zsh", "#!"]
    replace: "#!/usr/bin/env zsh\n"
    label: 🐚 zsh Shebang
  - replace: '[[ "$LONG_STRING" =~ "$SHORT_STRING" ]]'
    label: 🐚 String contains other string
  - trigger: "!sed"
    replace: "| sed 's/$|$//g' "
    label: 🐚 pipe to sed
  - trigger: "!null"
    replace: "&> /dev/null"
    label: 🐚 dev/null
  - replace: 'system_profiler SPDisplaysDataType | grep -c "Resolution"'
    label: 🐚 Screen count
  - trigger: "!resolve"
    replace: |
      resolved_path="${file_path/#\~/$HOME}"

    label: '🐚 Resolve ~'
  - trigger: "!hr"
    replace: "#-------------------------------------------------------------------------------"
  - label: "🐚 Number of Displays (on macOS)"
    replace: "system_profiler SPDisplaysDataType | grep -c resolution"
  - trigger: "!gc"
    label: "🐚 Guard Clause"
    replace: '[[ -e "$$|$" ]] && exit 1'
  - label: "🐚 Check whether process is running"
    replace: |
      if pgrep -x "app$|$" > /dev/null; then
      	echo "Running"
      else
      	echo "Not running"
      fi
  - regex: " ?!!"  # so this works whether prepended with space or not
    replace: " {\n"
  - trigger: "!rename"
    replace: |
      for file in * ; do
        mv "$file" "${file/text/replacement}"
      done
    label: "Bulk Rename"

  - triggers: ["!color", "!reset"]
    replace: "\\033[0m"
    label: reset
  - trigger: "!color"
    replace: "\\033[1;30m"
    label: fg black
  - trigger: "!color"
    replace: "\\033[1;31m"
    label: fg red
  - trigger: "!color"
    replace: "\\033[1;32m"
    label: fg green
  - trigger: "!color"
    replace: "\\033[1;33m"
    label: fg yellow
  - trigger: "!color"
    replace: "\\033[1;34m"
    label: fg blue
  - trigger: "!color"
    replace: "\\033[1;35m"
    label: fg magenta
  - trigger: "!color"
    replace: "\\033[1;36m"
    label: fg cyan
  - trigger: "!color"
    replace: "\\033[1;37m"
    label: fg white
  - trigger: "!color"
    replace: "\\033[1;40m"
    label: bg black
  - trigger: "!color"
    replace: "\\033[1;41m"
    label: bg red
  - trigger: "!color"
    replace: "\\033[1;42m"
    label: bg green
  - trigger: "!color"
    replace: "\\033[1;43m"
    label: bg yellow
  - trigger: "!color"
    replace: "\\033[1;44m"
    label: bg blue
  - trigger: "!color"
    replace: "\\033[1;45m"
    label: bg magenta
  - trigger: "!color"
    replace: "\\033[1;46m"
    label: bg cyan
  - trigger: "!color"
    replace: "\\033[1;47m"
    label: bg white
